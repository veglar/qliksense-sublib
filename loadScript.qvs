///$tab Main
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 kr;-# ##0,00 kr';
SET TimeFormat='hh:mm:ss';
SET DateFormat='YYYY-MM-DD';
SET TimestampFormat='YYYY-MM-DD hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='en-SE';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';
///$tab sublib.rapport
SUB sublib.report (_tabell,_konto,_enhet)
	/**
	Genererar en report table med rubrik-konto-relation.
	För att köra denna funktion behövs en tabell med två eller tre kolumner som innehåller rubrik, definition och evt. nummerformatering.

  Stödjer Qlik Sense VizBundle formtatet: https://help.qlik.com/sv-SE/sense/February2021/Subsystems/Hub/Content/Sense_Hub/Visualizations/VisualizationBundle/pl-pivot-chart.htm
	@param1 Tabellnamn på den tabell som innehåller rapportdefinitionen. Detta blir namnet fältnamn i rapporten. 
	@param2 Fältnamn som rapporten ska intervalmatchas och kopplas mot.
	@param3 Fältnamn som kan skilja olika orginastoriska enheter med olika krav. Om endast ett bolag ange ett fält med statisk värde.

	CALL MapReport.qvs('Demo','Kontonummer', 'BolagsID')

	Expression: num(	sum( {< [Kvotdel]={"Täljare"}>} Belopp) 
						/
						alt(aggr(nodistinct sum( {<[Kvotdel]={"Nämnare"}>} Belopp), [Rapportrad] ),1)
    				, [Format] )
	*/
 	/* Namnen på fälten i tabellen i parametern _tabell */
  
  	LET _Rapportfält_Rapportrubrik 	= 'Rubrik';  			//'['& FieldName(1, '$(_tabell)') & ']';
	LET _Rapportfält_account_definition = 'Rapportradsdefinition';  //'['& FieldName(2, '$(_tabell)') & ']';
  		
	LET _StylingField_Format	=IF(FieldNumber('Format',	 '$(_tabell)'),'[Format]', 		chr(39)&chr(39));
	LET _StylingField_Bold 		=IF(FieldNumber('Bold',	 	 '$(_tabell)'),'[Bold]', 		chr(39)&chr(39));
	LET _StylingField_Background=IF(FieldNumber('Background','$(_tabell)'),'[Background]' , 	chr(39)&chr(39));
	LET _StylingField_fontstyle =IF(FieldNumber('Font style','$(_tabell)'),'[Font style]', 	chr(39)&chr(39));   	
	LET _StylingField_fontcolor =IF(FieldNumber('Font color','$(_tabell)'),'[Font color]',		chr(39)&chr(39));       	
	LET _StylingField_adjusment =IF(FieldNumber('Adjustment','$(_tabell)'),'[Adjustment]',		chr(39)&chr(39));              
	LET _StylingField_fontsize	=IF(FieldNumber('Font size', '$(_tabell)'),'[Font size]',chr(39)&chr(39));                        
	LET _StylingField_comment	=IF(FieldNumber('Comment',	 '$(_tabell)'),'[Comment]',	chr(39)&chr(39));         
 
	[Report styling ($(_tabell))]:
  	LOAD 
  		Autonumber([$(_Rapportfält_Rapportrubrik)], 'Styling') as [%rapportstyling ($(_tabell))],
  		$(_StylingField_Format)                                as [Format ($(_tabell))] , 
		$(_StylingField_Bold)                                  as [Bold ($(_tabell))] ,                
		evaluate($(_StylingField_Background))                  as [Background ($(_tabell))]     ,                  
		$(_StylingField_fontstyle)                             as [Font style ($(_tabell))]   ,                      
		alt(evaluate($(_StylingField_fontcolor)),$(_StylingField_fontcolor)   )   as [Font color ($(_tabell))]  ,                     
		$(_StylingField_adjusment)                             as [Adjustment ($(_tabell))]     ,                
		$(_StylingField_fontsize)                              as [Font size ($(_tabell))],                            
		$(_StylingField_comment)                               as [Comment ($(_tabell))] ,
		[$(_Rapportfält_Rapportrubrik)] &';'& $(_StylingField_Bold)  &';'& $(_StylingField_Background)   &';'& $(_StylingField_fontstyle)  &';'& $(_StylingField_fontcolor)  &';'&  $(_StylingField_adjusment)   &';'& $(_StylingField_fontsize)  &';'& $(_StylingField_comment)  as [Report styling ($(_tabell))]
	Resident 
		[$(_tabell)]
   	;
	
    TMP_Rubriksordning:
    LOAD 
	 AutoNumber('$(_konto)|'&[$(_enhet)]&'|'&[$(_Rapportfält_Rapportrubrik)],'$(_tabell)' ) as [Header sort order]
    Resident [$(_tabell)];
    
	Rapport_kvotindelad:
  	/* Läser in nämnare på rader med kvot. Kontorapport stödjer endast en kvot per rad*/	  
  	LOAD 
		[$(_enhet)] as Rapportorganisationsenhet,
        AutoNumber('$(_konto)|'&[$(_enhet)]&'|'&[$(_Rapportfält_Rapportrubrik)],'$(_tabell)' ) as [Header sort order],
        
        //RecNo() as [Header sort order],
    	[$(_Rapportfält_Rapportrubrik)] ,
       	subfield(Subfield($(_Rapportfält_account_definition), '/', -1), '+') as [$(_Rapportfält_account_definition)],
    	'Nämnare' as Kvotdel
  	Resident [$(_tabell)]
  	WHERE 
  		WildMatch($(_Rapportfält_account_definition), '*/*')
        
		;

  /* Läser in täljare på rader med kvot. Kontorapport stödjer endast en kvot per rad*/ 
 	LOAD
  		[$(_enhet)] as Rapportorganisationsenhet,
      	AutoNumber('$(_konto)|'&[$(_enhet)]&'|'&[$(_Rapportfält_Rapportrubrik)],'$(_tabell)' ) as [Header sort order],
        [$(_Rapportfält_Rapportrubrik)] ,
     	subfield(Subfield($(_Rapportfält_account_definition), '/', -2), '+') as [$(_Rapportfält_account_definition)],
      	'Täljare' as Kvotdel
  	Resident 
		[$(_tabell)]
 	WHERE 
 		WildMatch($(_Rapportfält_account_definition), '*/*')
      ;

  	/* Läser in rader utan kvot */
    LOAD 
      	[$(_enhet)] as Rapportorganisationsenhet,
        AutoNumber('$(_konto)|'&[$(_enhet)]&'|'&[$(_Rapportfält_Rapportrubrik)],'$(_tabell)' ) as [Header sort order],
       	[$(_Rapportfält_Rapportrubrik)] ,
     	Subfield($(_Rapportfält_account_definition), '+') as [$(_Rapportfält_account_definition)],
        'Täljare' as Kvotdel
    Resident [$(_tabell)]
    WHERE NOT WildMatch($(_Rapportfält_account_definition), '*/*')
  
;
	DROP TABLE TMP_Rubriksordning;
   	DROP Table [$(_tabell)]
    ;


    FOR EACH _Rapportorganisationsenhet in FieldValueList('Rapportorganisationsenhet')
      /* 
      Löser ut alla referenser mellan raderna.
      */
      Trace ### $(_Rapportorganisationsenhet)  $(_tabell);
      
      Rapport_hiearchy:
      Hierarchy ([$(_Rapportfält_Rapportrubrik)], [$(_Rapportfält_account_definition)], NodeName)
      LOAD 
          [$(_Rapportfält_Rapportrubrik)], 
          [$(_Rapportfält_account_definition)], 
          [$(_Rapportfält_account_definition)] as NodeName, 
          Kvotdel,
          [Header sort order]
      Resident Rapport_kvotindelad
      WHERE  Rapportorganisationsenhet = '$(_Rapportorganisationsenhet)' ;

     // drop table Rapport_kvotindelad;


    /* Löser ut alla rader till ett intervall. En-kontorader blir interval på ett kontonummer. 
      Detta intervalmatchas mot kontonummer som måste finnas inläst i datamodellen
    */
  
     [Rapport ($(_tabell))]:
     LOAD  
          '$(_Rapportorganisationsenhet)' as Rapportorganisationsenhet,
          [$(_Rapportfält_Rapportrubrik)] 							as [Rubrik ($(_konto)_$(_tabell))],  
          Autonumber([$(_Rapportfält_Rapportrubrik)], 'Styling') 	as [%rapportstyling ($(_tabell))],
          subfield(NodeName1, '..', 1) 								as [_KontoFrom],
          subfield(NodeName1, '..', -1) 							as [_KontoTom],
          Kvotdel 													as [Kvotdel ($(_tabell))],
          [Header sort order] 											as [Rapportrad ($(_tabell))]
      Resident Rapport_hiearchy
   //   WHERE isnum(subfield(NodeName1, '..', 1))   
      ;
      DROP TABLE Rapport_hiearchy;
  
    next   _Rapportorganisationsenhet
    LET _Rapportorganisationsenhet=;
         
    drop table Rapport_kvotindelad;

    LEFT JOIN
  	IntervalMatch([$(_konto)])
  	LOAD  [_KontoFrom], [_KontoTom] 
  	Resident 
    	[Rapport ($(_tabell))]
    WHERE isnum([_KontoFrom])
   ;
   
//    /** Hanterar de fall där värdet inte är numerisk utan en sträng*/
//      LOAD  
//           '$(_Rapportorganisationsenhet)' as Rapportorganisationsenhet,
//           [$(_Rapportfält_Rapportrubrik)] 							as [Rubrik ($(_konto)_$(_tabell))],  
//           Autonumber([$(_Rapportfält_Rapportrubrik)], 'Styling') 	as [%rapportstyling ($(_tabell))],
//           subfield(NodeName1, '..', 1) 								as [_KontoFrom],
//           subfield(NodeName1, '..', -1) 							as [_KontoTom],
//           Kvotdel 													as [Kvotdel ($(_tabell))],
//           [Header sort order] 											as [Rapportrad ($(_tabell))],
//           '$(_Rapportorganisationsenhet)' & '|'& subfield(NodeName1, '..', 1) as [$(_konto)]
//       Resident Rapport_hiearchy
//       WHERE NOT isnum(subfield(NodeName1, '..', 1))   
//       ;
//       DROP TABLE Rapport_hiearchy;
  
   
  //  DROP FIELD [_KontoFrom], [_KontoTom];


	sub ConcatReport
		
		/** Autoconcatinerar Styling */
	 	[Report styling $(_konto)]:
	  	LOAD 
      		[%rapportstyling ($(_tabell))] as [%rapportstyling_$(_konto)],
	  		MaxString([Format ($(_tabell))]) as [Format_$(_konto)] , 
			MaxString([Bold ($(_tabell))]) as [Bold_$(_konto)] ,                
			MaxString([Background ($(_tabell))]) as [Background_$(_konto)]     ,                  
			MaxString([Font style ($(_tabell))]) as [Font style_$(_konto)]   ,                      
			MaxString([Font color ($(_tabell))]) as [Font color_$(_konto)]  ,                     
	    	MaxString([Adjustment ($(_tabell))]) as [Adjustment_$(_konto)]     ,                
			MaxString([Font size ($(_tabell))]) as [Font size_$(_konto)],                            
			MaxString([Comment ($(_tabell))]) as [Comment_$(_konto)] ,
		  	MaxString([Report styling ($(_tabell))]) as [Report styling_$(_konto)]
		Resident 
			[Report styling ($(_tabell))]
        group by  [%rapportstyling ($(_tabell))]
		;
		Drop table  	[Report styling ($(_tabell))];


		/** Concatinerar report table*/
		IF isnull( NoOfFields ('Rapport_$(_konto)')) then
			/*Skapar tom tabell som det går att concatenera på.*/
			[Rapport_$(_konto)]:
			LOAD * 
			Inline [Kvotdel_$(_konto), Rapportrad_$(_konto)];
		endif 

		Concatenate ([Rapport_$(_konto)])
		LOAD 
     	 	Rapportorganisationsenhet &'|'& alt([$(_konto)], [_KontoFrom]) as [%rapport_$(_konto)],
			[%rapportstyling ($(_tabell))] as [%rapportstyling_$(_konto)],
			[Kvotdel ($(_tabell))] as [Kvotdel_$(_konto)], 
			[Rapportrad ($(_tabell))] AS [Rapportrad_$(_konto)],
			[Rubrik ($(_konto)_$(_tabell))]  
		Resident
			[Rapport ($(_tabell))]
		;

		DROP TABLE [Rapport ($(_tabell))];
	 endsub //	ConcatReport
	call ConcatReport

ENDSUB //SkapaRapport
///$tab sublib.rapport.test
Transaktioner: 
crosstable (Datum, Belopp,2)
LOAD* inline [
Bolag,Konto,2023 Q2,2023 Q1,2022 Q4,2022 Q3,2022 Q2,2022 Q1,2022 Q4,2021 Q3,2021 Q2,2021 Q1
ACME, 3010, 8784,   8284,   8758,   8772,   8211,   7990,   7602,   7330,   6808,   6519
ACME, 4415, -5179,  -4929,  -5268,  -5278,  -4927,  -4699,  -4376,  -4182,  -3905,  -3810
ACME, 6000, -2704,  -2548,  -2720,  -2939,  -2580,  -2485,  -2409,  -2362,  -2188,  -2103
ACME, 7200, -200,   -195,   -221,   -253,   -237,   -193,   -191,   -189,   -179,   -174
ACME, 8311, 2,      0,      0,      1,      1,      1,      2,      2,      2,      2
ACME, 8413, -65,    -64,    -68,    -3,     -2,     -2,     -1,     -1,     -2,     -13
ACME, 8910, -134,   -124,   -106,   -20,    -109,   -130,   -129,   -138,   -125,   -88
];

LEFT JOIN  LOAD Datum, Bolag, Konto, Bolag&'|'&Konto as %rapport_Konto Resident Transaktioner;


RR:
LOAD 'ACME' as Bolag, * inline [
Rubrik,           Rapportradsdefinition,Format,      Bold, Background,Font style,Font color,Adjustment,Font size,Comment
Försäljning,      3000..3999,           "# ##0 kr", "",   "green(13)",,,,,
Kostnad såld vara,4000..5999,           "# ##0 kr", "",   "green(13)",,,,,
Bruttoresultat,   Försäljning+Kostnad såld vara,"# ##0 kr",<bold>,yellow(125)
Försäljningskostnader,6000..6999,       "# ##0 kr", "",   "blue(13)"   
Varukostnader,    4000..4499+4500..4999,"# ##0 kr", "",   "blue(13)",,QlikTechblue(),,,
Administrationskostnader,7200,          "# ##0 kr", "",   "blue(13)"   
Rörelseresultat,  Bruttoresultat+ 6000..7200,"# ##0 kr",<bold>,yellow(125)
Rörelsemarginal,  Rörelseresultat/Försäljning,"# ##0%",<bold>,yellow(200),       <italic>
Finansiella intäkter,8300..8399,        "# ##0 kr", "",   "Magenta(13)"
Finansiella kostnader,8400..8499,       "# ##0 kr", "",   "Magenta(13)"
Resultat efter finansiella poster,Rörelseresultat+ 8300..8499,"# ##0 kr",<bold>,yellow(200),   
Inkomstskatt,     8900..8999,           "# ##0 kr", "",   cyan(13)
Resultat,         Resultat efter finansiella poster+Inkomstskatt,"# ##0 kr",<bold>,yellow(125)


];
CALL sublib.rapport ('RR','Konto', 'Bolag')
///$tab sublib.kalender
SUB sublib.kalender (_minKalenderdatum, _maxKalenderdatum, _kalendernyckelfält, _calendarPrefix)
/**
Skapa kalender från ett angett min- och max-datum

@version 2021-07-30
@Param 1 Obligatoriskt. [Minsta kalenderdatum] Det datum där kalendern ska börja.
@Param 2 Obligatoriskt. Det datum kalendern sk sluta
@Param 3 Valfri. Namn på nyckelfält som inehåller heltalsrepresentationen av kalenderdagen.
@Param 4 Valfri. Ett prefix som identifierer både kalendertabell och fältnamn. Default är <blank>
@variable IN vL.sublib.kalender.årmånadformat Det format som År-månad-fältet ska presenteras i. Default='YYYY MMM'.
@variable IN vL.sublib.kalender.tabellnamn Namn på kalendertabell. Evt. prefix angett som @param 4 tillkommer i slutgiltig tabellnam.
@variable IN vL.sublib.kalender.idag Brytpunkt mellan historik och framtid.  Default=today().

*/
	/*
	* Konfigurering av kalenderparametrar
	*/
	LET vL.sublib.kalender.årmånadformat = if(len('$(vL.sublib.kalender.årmånadformat)')=0, 'YYYY MMM', vL.sublib.kalender.årmånadformat);
	LET vL.sublib.kalender.tabellnamn = if(len('$(vL.sublib.kalender.tabellnamn)')=0, 'Kalender', vL.sublib.kalender.tabellnamn);
	LET vL.sublib.kalender.idag= ;
	LET FirstMonthOfYear= if(len('$(FirstMonthOfYear)')=0, 1, FirstMonthOfYear);
    LET ReferenceDay= if(len('$(ReferenceDay)')=0, 1, ReferenceDay);
    LET BrokenWeeks= if(len('$(BrokenWeeks)')=0, 1, BrokenWeeks);
    LET FirstWeekDay= if(len('$(FirstWeekDay)')=0, 1, FirstWeekDay);
	/*
	* Stadfäster nyckelfält i kalendern. 
	* Använder @param3 _kalendernyckelfält, om ej definierat så används fältnamnet [%datum] .
	*/
	IF 	len(_kalendernyckelfält)>0 then
		SET _kalendernyckelfält = $(_kalendernyckelfält);
	ELSE
		SET _kalendernyckelfält = %datum;
	ENDIF 
	
	/* 
	* Skapar kalendertabell
	*/
	[$(_calendarPrefix)$(vL.sublib.kalender.tabellnamn)]:
	NOCONCATENATE LOAD      
		num( temporärdatum) 										as [$(_kalendernyckelfält)] ,
		Date(temporärdatum) 										as [$(_calendarPrefix)Datum],
		weekday(temporärdatum, $(FirstWeekDay)) 					as [$(_calendarPrefix)Veckodag],
		YearName(temporärdatum,0,$(FirstMonthOfYear)) 				as [$(_calendarPrefix)År],
		dual(week([temporärdatum],$(FirstWeekDay) ,$(BrokenWeeks),$(ReferenceDay)),
			 week(addmonths(temporärdatum,1-$(FirstMonthOfYear)),$(FirstWeekDay) ,$(BrokenWeeks),$(ReferenceDay))
			) 														as [$(_calendarPrefix)Vecka],
		
        DUAL(Month(temporärdatum) ,  
			 num(Month(MonthName(temporärdatum, +1- $(FirstMonthOfYear))))
			)														as [$(_calendarPrefix)Månad],
            
		dual(date(MonthName(temporärdatum), '$(vL.sublib.kalender.årmånadformat)'),
			 MonthStart(temporärdatum)) 							as [$(_calendarPrefix)År-månad],
		'Q'&Num(Ceil(Num(Month(temporärdatum))/3)) 					as [$(_calendarPrefix)Kvartal],
		Dual('Q'&Ceil(month(temporärdatum)/3) & ' ' &Year(temporärdatum), 
			 num(QuarterStart(temporärdatum)) )  					as [$(_calendarPrefix)År-kvartal],
		if(temporärdatum  > (if(len('$(vL.sublib.kalender.idag)')=0, today(), date('$(vL.sublib.kalender.idag)'))), 'Framtid', 'Historik') as [Historik/Framtid]
		;
	LOAD
		Date('$(_minKalenderdatum)') + RecNo()-1 AS temporärdatum
	AUTOGENERATE 
		Date('$(_maxKalenderdatum)') - Date('$(_minKalenderdatum)') + 1;


	SET vL.SetModifier.CleanCalender = År, Månad, Datum, [År-månad],Veckodag,Vecka,Kvartal,[År-kvartal], [Historik/Framtid];

	
	// Year To Date Modifier
	Let vL.SetModifier.YTD = 
	replace(
		'$(vL.SetModifier.CleanCalender),
				År=P({<$(vL.SetModifier.CleanCalender), Datum={''$1''}>}År),
				Datum = {"<=¤(=Date(''$1''))"}', 
		'¤', '$');	


	// Month 2 Date
	Let vL.SetModifier.Months2Date = 
	Replace(
		'$(vL.SetModifier.CleanCalender),
				Datum={">=¤(=date(rangemin(monthstart(''$1'',alt($2,0)),date(''$1''))))<=¤(=date(rangemax(monthend(''$1'',alt($2,0)),date(''$1''))))"}',
		'¤','$');	


	//Rensar upp lokala variabler
	LET vL.sublib.kalender.årmånadformat =;
	LET vL.sublib.kalender.tabellnamn =;
	LET _maxKalenderdatum=;
	LET _minKalenderdatum=;
ENDSUB  //Kalender

SUB sublib.kalenderfrånfält (vL.sublib.kalender.nyckelfält, _källa, _calendarPrefix)

	// Ta reda på om minmax ska hämtas från specifik resident-tabell, qvd eller textfil.
	IF len('$(_källa)')=0 THEN
		SET vL.sublib.kalender.minmaxkälla = ";LOAD FieldValue('$(vL.sublib.kalender.nyckelfält)', recno()) as [$(vL.sublib.kalender.nyckelfält)] 
										AUTOGENERATE FieldValueCount('$(vL.sublib.kalender.nyckelfält)')";
        kalender.minmaxtabell:
		LOAD
			max([$(vL.sublib.kalender.nyckelfält)])+0 as tempKalender.maxdatum,
			min([$(vL.sublib.kalender.nyckelfält)])+0 as tempKalender.mindatum	;
        LOAD 
        	FieldValue('$(vL.sublib.kalender.nyckelfält)', recno()) as [$(vL.sublib.kalender.nyckelfält)] 
		AUTOGENERATE FieldValueCount('$(vL.sublib.kalender.nyckelfält)');

	ELSEIF index('$(_källa)', '.') = 0 THEN
		SET vL.sublib.kalender.minmaxkälla = 'RESIDENT $(_källa)';
		kalender.minmaxtabell:
		LOAD
			max([$(vL.sublib.kalender.nyckelfält)])+0 as tempKalender.maxdatum,
			min([$(vL.sublib.kalender.nyckelfält)])+0 as tempKalender.mindatum	
        RESIDENT $(_källa);

	ELSEIF '.qvd' = lower(right('$(_källa)', 4)) THEN
		SET vL.sublib.kalender.minmaxkälla = 'FROM $(_källa) (qvd)';
        kalender.minmaxtabell:
		LOAD
			max([$(vL.sublib.kalender.nyckelfält)])+0 as tempKalender.maxdatum,
			min([$(vL.sublib.kalender.nyckelfält)])+0 as tempKalender.mindatum	
        FROM $(_källa) (qvd);

	ELSE
		SET vL.sublib.kalender.minmaxkälla = 'FROM $(_källa)';	// Antar text fil
        kalender.minmaxtabell:
		LOAD
			max([$(vL.sublib.kalender.nyckelfält)])+0 as tempKalender.maxdatum,
			min([$(vL.sublib.kalender.nyckelfält)])+0 as tempKalender.mindatum	
        FROM $(_källa);

	ENDIF

	LET vL.sublib.kalender.minmaxkälla =;
	// Byter ut europeisk decimalseperator  ',' så att qlikview förstår att det är ett värde.
	LET _maxKalenderdatum = replace(peek('tempKalender.maxdatum'), ',', '.');
	LET _minKalenderdatum = replace(peek('tempKalender.mindatum'), ',', '.');
	DROP table kalender.minmaxtabell;

	CALL sublib.kalender( '$(_minKalenderdatum)','$(_maxKalenderdatum)','$(vL.sublib.kalender.nyckelfält)', _calendarPrefix )
	LET _maxKalenderdatum=;
	LET _minKalenderdatum=;
ENDSUB

SUB sublib.kalenderlänk(vL.sublib.kalender.faktatabell, vL.sublib.kalender.datumfält, vL.sublib.kalender.datumnyckel, vL.sublib.kalender.linkID)
/**
Skapar länkkalender med fälten, 
[Fält som ska kopplas mot Fakta] - @Param 4
[Typ av datum] 	- fälten som skickas in i @Param 2 ex ([Fält 1], [Fält 2], [Fält 3]
[Länkfält till kalender] - @Param 3

@syntax CALL sublib.kalenderlänk(vL.sublib.kalender.faktatabell, vL.sublib.kalender.datumfält, vL.sublib.kalender.datumnyckel, _RowId)
@Syntax CALL sublib.kalenderlänk('Fact','[Date (Booking)], [Date (Start)]','%DateKey','TransactionID');
@Param 1 Tabell som innehåller fakta/transaktionsmängd, exempel "Fact"
@Param 2 Kommaseparerad lista med fält som skall tas från Fact/Transaction för att generera upp länkkalender. 
		 Fältnamnen blir värden i "Kalender", exempel "Date1, Date2, Date3".
@Param 3 Fältnamn som skall kopplas mot masterkalender - exempel, "%DateKey"
@Param 4 Fältnamn som skall kopplas mot fakta/transaktionsmängd, exempel "TransactionID"

*/
    [Kalenderlänk]:
    CROSSTABLE([Kalender], $(vL.sublib.kalender.datumnyckel), 1)
    LOAD DISTINCT
			$(vL.sublib.kalender.linkID),
 	    $(vL.sublib.kalender.datumfält)
		RESIDENT 
			[$(vL.sublib.kalender.faktatabell)]
    ;
ENDSUB
///$tab sublib.kalender.test
LOAD floor(rand()*720+yearstart(today())) as %testdatum
AutoGenerate 365;

Call sublib.kalenderfrånfält('%testdatum')
///$tab sublib.log
 /**
 Log function saves info about  
 - Log entry start and stop time 
 - Log entry header and description
 - Log entry level (recursive level, will increase if an log entry level is created as a sub section of an other log entry.
 */      
    SUB sublib.log.start (_sublib.log.log_header, _sublib.log.log_description)
    /**
    Start new log entry
    @param1 [optional] Log entry header
    @param2 [optional] Log entry description
    */
         /*Skapar eller adderar +1 till sublib.log.log_level för varje iteration*/
        if isnull(TableNumber('sublib.log_events')) OR isnull(sublib.log.log_level) then
        LET sublib.log.log_level= 1;
        else 
        	sublib.log.log_level=sublib.log.log_level+1;
		endif
		[sublib.log_events]:
      	LOAD 
        	AutoNumberHash256(now(),'$(_sublib.log.log_header)') as [sublib.log entry id],
            $(sublib.log.log_level) as [sublib.log entry level],
            '$(_sublib.log.log_header)' as [sublib.log entry header],
          	'$(_sublib.log.log_description)' as [sublib.log entry description],
          	Now() as [sublib.log entry start],
          	Timestamp(null()) as [sublib.log entry stop]
      	AutoGenerate 1;
        SET _sublib.log.log_header=;
        SET _sublib.log.log_description=;
  	ENDSUB //logg.start

  	SUB sublib.log.stop
    /**
    Closes the latest log entry. When called the log entry field [sublib.log entry stop] will recieve a value.
    */
		sublib.temp_log_events:      
       	NoConcatenate
      	LOAD
        	[sublib.log entry id],
          	[sublib.log entry level], 
          	[sublib.log entry header], 
          	[sublib.log entry description],
          	[sublib.log entry start], 
          	timestamp(now()) as [sublib.log entry stop]
      	Resident [sublib.log_events] 
      	Where 
          	[sublib.log entry level] = $(sublib.log.log_level) 
          	AND isnull( [sublib.log entry stop]);
      	Concatenate LOAD 
          	[sublib.log entry id],
          	[sublib.log entry level],
          	[sublib.log entry header],
          	[sublib.log entry description],
          	[sublib.log entry start],
          	timestamp([sublib.log entry stop]) as [sublib.log entry stop]
      Resident 
          [sublib.log_events]
      Where 
          NOT ( 
              [sublib.log entry level] = $(sublib.log.log_level) 
              AND isnull( [sublib.log entry stop])
              )
      ;
  DROP table [sublib.log_events];
  RENAME Table sublib.temp_log_events to [sublib.log_events];
  
  /*
  	Clear or reduce sublib.log.log_level with -1 för each iteration
    Clearing is done to avoid getting a trace of the variable in the qlik application using this sub
    OBS: If not all log starts have been closed by a stop then the variable will get into the qlik application with a value
  */
  IF  sublib.log.log_level = 1 then
  	SET sublib.log.log_level =;
  ELSE 
  	LET sublib.log.log_level= sublib.log.log_level-1; //alt(sublib.log.log_level-1, 0);
  ENDIF
  SET _sublib.log.log_header=;
  ENDSUB //logg.stop
///$tab sublib.logg.test
  
call sublib.log.start('Life','Log of life')
  sleep(100);
  
  call sublib.log.start('Childhood')
    sleep(5000);
    
    call sublib.log.start('Pre school era')
    sleep(5000);
    call sublib.log.stop
    call sublib.log.start('School era')
        call sublib.log.start('Elementary school','Åk 1-9')
          sleep(8000);
        call sublib.log.stop  //Stop loop A3 iteration
      
      For i=1 to 2 step 1
        call sublib.log.start('Secondary school','Year no $(i) of 2')
          sleep(1000);
        call sublib.log.stop  //Stop loop A3 iteration
      next i
      SET i=; //Nollställer loopvariabel
      
    call sublib.log.stop
  call sublib.log.stop
  Sleep(1500); //Unemployed between skola och jobb. No log entry for this period
  call sublib.log.start('Work life')
    sleep(10000);
  call sublib.log.stop
  call sublib.log.start('Retirement life')
    sleep(4000);
  call sublib.log.stop
  
call sublib.log.stop
  call sublib.log.start('Death')
  call sublib.log.stop
/** Färg som ändras beroende på Loggnivå i gränssnitt*/
SET vL.logg.bgcolor = Pick(Loggnivå, Red(), Blue(), Yellow(200), Yellow(100), Blue(75), Blue(50), Blue(25));